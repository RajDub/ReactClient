{"ast":null,"code":"var _jsxFileName = \"C:\\\\rajivd\\\\React\\\\raj-sec-app\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport './index.css'; // function Hello(props){\n//   return (<div>Hello React {props.value}</div>);\n// } \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Hello extends React.Component {\n  render() {\n    // return (<div>Hello React {this.props.value}</div>);\n    return /*#__PURE__*/React.createElement('div', null, 'Hello React2 ' + this.props.value);\n  }\n\n}\n\nfunction Button(props) {\n  //return (<button onClick={logRandom}>TEST</button>);   \n  //return (<button onClick={()=>console.log(Math.random())}>TEST</button>);   \n  //  const [ctr,setctr]=useState(5);\n  const handleClick = () => props.onClickFunction(props.increment);\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: [\"+\", props.increment]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Button;\n\nfunction Display(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 11\n  }, this);\n}\n\n_c2 = Display;\n\nfunction logRandom() {\n  console.log(Math.random());\n} // function App() {\n//  const [ctr,setctr]=useState(0);\n//   const incrementCounter=(i)=>setctr(ctr+i)\n//      return (<React.Fragment>\n//       <Button onClickFunction={incrementCounter} increment={1}/>\n//       <Button onClickFunction={incrementCounter} increment={5}/>\n//       <Button onClickFunction={incrementCounter} increment={10}/>\n//       <Button onClickFunction={incrementCounter} increment={100}/>\n//       <Display message={ctr}></Display>\n//       </React.Fragment>);\n// }\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //const [ctr,setctr]=useState(0);\n\n    this.incrementCounter = i => this.setState(ctrctr + i);\n\n    this.state = {\n      ctr: 0\n    };\n  } //incrementCounter=(i)=>setctr(ctr+i)\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClickFunction: incrementCounter,\n        increment: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClickFunction: incrementCounter,\n        increment: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClickFunction: incrementCounter,\n        increment: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClickFunction: incrementCounter,\n        increment: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Display, {\n        message: ctr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }, this);\n  }\n\n}\n\nReactDOM.render(\n/*#__PURE__*/\n// <Hello value={'Rajiv'}/>,\n_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 83,\n  columnNumber: 3\n}, this), document.getElementById('root')); //  // ========================================\n//   function Square(props){\n//     return (\n//         <button className=\"square\" \n//         onClick={()=>{props.onClick()}}\n//         >\n//           {props.value}\n//         </button>\n//       );}\n//   class Board extends React.Component {\n//     renderSquare(i) {\n//       return (<Square \n//       value={this.props.squares[i]} \n//       onClick={()=>this.props.onClick(i)}\n//       />);\n//     }\n//     render() {\n//        return (\n//         <div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(0)}\n//             {this.renderSquare(1)}\n//             {this.renderSquare(2)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(3)}\n//             {this.renderSquare(4)}\n//             {this.renderSquare(5)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(6)}\n//             {this.renderSquare(7)}\n//             {this.renderSquare(8)}\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n//   class Game extends React.Component {\n//     constructor(props)\n//     {\n//         super(props);\n//         this.state={history:[{squares:Array(9).fill(null)}],xIsNext: true,stepNumber:0,};\n//     }\n//     jumpTo(step)\n//     {\n//         this.setState({stepNumber:step,xIsNext:(step%2)===0})\n//     }\n//     handleClick(i) {\n//         const history =this.state.history.slice(0,this.state.stepNumber+1);\n//         const current=history[history.length-1];\n//         const squares = current.squares.slice();\n//         if (calculateWinner(squares) || squares[i]) {\n//             return;\n//           }\n//         //squares[i] = 'X';\n//       //  squares[i] =nextPlayer=='X'?'X':'O';\n//       squares[i] = this.state.xIsNext ? 'X' : 'O';\n//         this.setState(\n//       {\n//           history:history.concat([{squares:squares}]),\n//           stepNumber:history.length,\n//           xIsNext:!this.state.xIsNext            \n//       });\n//     }\n//     render() {\n//         const history =this.state.history;\n//         const current=history[this.state.stepNumber];\n//         let winner=calculateWinner(current.squares);\n//         const moves = history.map((step, move) => {\n//             const desc = move ?\n//               'Go to move #' + move :\n//               'Go to game start';\n//             return (\n//               <li key={move}>\n//                 <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//               </li>\n//             );\n//           });\n//         let status;\n//         if(winner)\n//         {\n//             status='Winner: ' + winner;\n//         }\n//         else{\n//             status='Next player: ' +(this.state.xIsNext?'X':'O');\n//         }\n//       return (\n//         <div className=\"game\">\n//           <div className=\"game-board\">\n//             <Board squares={current.squares} onClick={(i)=>this.handleClick(i)} />\n//           </div>\n//           <div className=\"game-info\">\n//             <div>{status}</div>\n//             <ol>{moves}</ol>\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n//   function calculateWinner(squares) {\n//     const lines = [\n//       [0, 1, 2],\n//       [3, 4, 5],\n//       [6, 7, 8],\n//       [0, 3, 6],\n//       [1, 4, 7],\n//       [2, 5, 8],\n//       [0, 4, 8],\n//       [2, 4, 6],\n//     ];\n//     for (let i = 0; i < lines.length; i++) {\n//       const [a, b, c] = lines[i];\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//         return squares[a];\n//       }\n//     }\n//     return null;\n//   }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Display\");","map":{"version":3,"sources":["C:/rajivd/React/raj-sec-app/src/index.js"],"names":["React","useState","ReactDOM","render","Hello","Component","createElement","props","value","Button","handleClick","onClickFunction","increment","Display","message","logRandom","console","log","Math","random","App","constructor","incrementCounter","i","setState","ctrctr","state","ctr","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,IAAmBC,MAAnB,QAAiC,WAAjC;AACA,OAAO,aAAP,C,CAKA;AACA;AACA;;;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CACA;AAEEF,EAAAA,MAAM,GACN;AACC;AACA,wBAAOH,KAAK,CAACM,aAAN,CAAoB,KAApB,EAA0B,IAA1B,EAA+B,kBAAkB,KAAKC,KAAL,CAAWC,KAA5D,CAAP;AACA;;AANH;;AAQA,SAASC,MAAT,CAAgBF,KAAhB,EACA;AACC;AACG;AACF;AACG,QAAMG,WAAW,GAAC,MAAIH,KAAK,CAACI,eAAN,CAAsBJ,KAAK,CAACK,SAA5B,CAAtB;;AACD,sBACA;AAAQ,IAAA,OAAO,EAAEF,WAAjB;AAAA,oBAAgCH,KAAK,CAACK,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAIH;;KAVQH,M;;AAYT,SAASI,OAAT,CAAiBN,KAAjB,EACA;AACE,sBAAQ;AAAA,cAAMA,KAAK,CAACO;AAAZ;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;;MAHQD,O;;AAIT,SAASE,SAAT,GACA;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,MAAL,EAAZ;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,MAAMC,GAAN,SAAkBpB,KAAK,CAACK,SAAxB,CAAkC;AAG/BgB,EAAAA,WAAW,CAACd,KAAD,EACX;AACE,UAAMA,KAAN,EADF,CAEE;;AAFF,SAQAe,gBARA,GAQkBC,CAAD,IAAK,KAAKC,QAAL,CAAcC,MAAM,GAACF,CAArB,CARtB;;AAGE,SAAKG,KAAL,GAAW;AAACC,MAAAA,GAAG,EAAC;AAAL,KAAX;AAED,GAT8B,CAW/B;;;AAGAxB,EAAAA,MAAM,GAAE;AACL,wBAAQ,QAAC,KAAD,CAAO,QAAP;AAAA,8BACP,QAAC,MAAD;AAAQ,QAAA,eAAe,EAAEmB,gBAAzB;AAA2C,QAAA,SAAS,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA,cADO,eAEP,QAAC,MAAD;AAAQ,QAAA,eAAe,EAAEA,gBAAzB;AAA2C,QAAA,SAAS,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFO,eAGP,QAAC,MAAD;AAAQ,QAAA,eAAe,EAAEA,gBAAzB;AAA2C,QAAA,SAAS,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA,cAHO,eAIP,QAAC,MAAD;AAAQ,QAAA,eAAe,EAAEA,gBAAzB;AAA2C,QAAA,SAAS,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA,cAJO,eAKP,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEK;AAAlB;AAAA;AAAA;AAAA;AAAA,cALO;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAOF;;AAtB8B;;AA0BjCzB,QAAQ,CAACC,MAAT;AAAA;AACC;AACA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAFD,EAICyB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJD,E,CAesourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\n\r\n// function Hello(props){\r\n//   return (<div>Hello React {props.value}</div>);\r\n// } \r\n\r\nclass Hello extends React.Component\r\n{\r\n  \r\n  render()\r\n  {\r\n   // return (<div>Hello React {this.props.value}</div>);\r\n   return React.createElement('div',null,'Hello React2 ' + this.props.value);\r\n  }\r\n} \r\nfunction Button(props)\r\n{\r\n //return (<button onClick={logRandom}>TEST</button>);   \r\n    //return (<button onClick={()=>console.log(Math.random())}>TEST</button>);   \r\n  //  const [ctr,setctr]=useState(5);\r\n     const handleClick=()=>props.onClickFunction(props.increment);\r\n    return (\r\n    <button onClick={handleClick}>+{props.increment}     \r\n    </button>\r\n    );    \r\n} \r\n\r\nfunction Display(props)\r\n{\r\n  return (<div>{props.message}</div>);\r\n}\r\nfunction logRandom()\r\n{\r\n  console.log(Math.random());\r\n}\r\n\r\n// function App() {\r\n//  const [ctr,setctr]=useState(0);\r\n//   const incrementCounter=(i)=>setctr(ctr+i)\r\n//      return (<React.Fragment>\r\n//       <Button onClickFunction={incrementCounter} increment={1}/>\r\n//       <Button onClickFunction={incrementCounter} increment={5}/>\r\n//       <Button onClickFunction={incrementCounter} increment={10}/>\r\n//       <Button onClickFunction={incrementCounter} increment={100}/>\r\n//       <Display message={ctr}></Display>\r\n//       </React.Fragment>);\r\n  \r\n// }\r\n\r\nclass App extends React.Component {\r\n   \r\n   \r\n   constructor(props)\r\n   {\r\n     super(props);\r\n     //const [ctr,setctr]=useState(0);\r\n     this.state={ctr:0};\r\n\r\n   }\r\n\r\n   //incrementCounter=(i)=>setctr(ctr+i)\r\n   incrementCounter=(i)=>this.setState(ctrctr+i);\r\n\r\n   render(){\r\n      return (<React.Fragment>\r\n       <Button onClickFunction={incrementCounter} increment={1}/>\r\n       <Button onClickFunction={incrementCounter} increment={5}/>\r\n       <Button onClickFunction={incrementCounter} increment={10}/>\r\n       <Button onClickFunction={incrementCounter} increment={100}/>\r\n       <Display message={ctr}></Display>\r\n       </React.Fragment>);\r\n   }\r\n   \r\n }\r\n \r\n ReactDOM.render(\r\n  // <Hello value={'Rajiv'}/>,\r\n  <App/>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  // ========================================\r\n//   function Square(props){\r\n//     return (\r\n//         <button className=\"square\" \r\n//         onClick={()=>{props.onClick()}}\r\n//         >\r\n//           {props.value}\r\n//         </button>\r\n//       );}\r\n\r\n\r\n  \r\n//   class Board extends React.Component {\r\n    \r\n   \r\n//     renderSquare(i) {\r\n//       return (<Square \r\n//       value={this.props.squares[i]} \r\n//       onClick={()=>this.props.onClick(i)}\r\n//       />);\r\n//     }\r\n   \r\n   \r\n//     render() {\r\n//        return (\r\n//         <div>\r\n          \r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(0)}\r\n//             {this.renderSquare(1)}\r\n//             {this.renderSquare(2)}\r\n//           </div>\r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(3)}\r\n//             {this.renderSquare(4)}\r\n//             {this.renderSquare(5)}\r\n//           </div>\r\n//           <div className=\"board-row\">\r\n//             {this.renderSquare(6)}\r\n//             {this.renderSquare(7)}\r\n//             {this.renderSquare(8)}\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  \r\n//   class Game extends React.Component {\r\n\r\n//     constructor(props)\r\n//     {\r\n//         super(props);\r\n//         this.state={history:[{squares:Array(9).fill(null)}],xIsNext: true,stepNumber:0,};\r\n\r\n//     }\r\n//     jumpTo(step)\r\n//     {\r\n//         this.setState({stepNumber:step,xIsNext:(step%2)===0})\r\n//     }\r\n\r\n//     handleClick(i) {\r\n//         const history =this.state.history.slice(0,this.state.stepNumber+1);\r\n//         const current=history[history.length-1];\r\n//         const squares = current.squares.slice();\r\n\r\n//         if (calculateWinner(squares) || squares[i]) {\r\n//             return;\r\n//           }\r\n//         //squares[i] = 'X';\r\n//       //  squares[i] =nextPlayer=='X'?'X':'O';\r\n//       squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n//         this.setState(\r\n//       {\r\n//           history:history.concat([{squares:squares}]),\r\n//           stepNumber:history.length,\r\n//           xIsNext:!this.state.xIsNext            \r\n//       });\r\n//     }\r\n//     render() {\r\n\r\n//         const history =this.state.history;\r\n//         const current=history[this.state.stepNumber];\r\n//         let winner=calculateWinner(current.squares);\r\n\r\n//         const moves = history.map((step, move) => {\r\n//             const desc = move ?\r\n//               'Go to move #' + move :\r\n//               'Go to game start';\r\n//             return (\r\n//               <li key={move}>\r\n//                 <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n//               </li>\r\n//             );\r\n//           });\r\n\r\n\r\n//         let status;\r\n//         if(winner)\r\n//         {\r\n//             status='Winner: ' + winner;\r\n//         }\r\n//         else{\r\n//             status='Next player: ' +(this.state.xIsNext?'X':'O');\r\n//         }\r\n\r\n\r\n//       return (\r\n//         <div className=\"game\">\r\n//           <div className=\"game-board\">\r\n//             <Board squares={current.squares} onClick={(i)=>this.handleClick(i)} />\r\n//           </div>\r\n//           <div className=\"game-info\">\r\n//             <div>{status}</div>\r\n//             <ol>{moves}</ol>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  \r\n \r\n  \r\n\r\n//   function calculateWinner(squares) {\r\n//     const lines = [\r\n//       [0, 1, 2],\r\n//       [3, 4, 5],\r\n//       [6, 7, 8],\r\n//       [0, 3, 6],\r\n//       [1, 4, 7],\r\n//       [2, 5, 8],\r\n//       [0, 4, 8],\r\n//       [2, 4, 6],\r\n//     ];\r\n//     for (let i = 0; i < lines.length; i++) {\r\n//       const [a, b, c] = lines[i];\r\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n//         return squares[a];\r\n//       }\r\n//     }\r\n//     return null;\r\n//   }"]},"metadata":{},"sourceType":"module"}