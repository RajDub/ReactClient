{"ast":null,"code":"var _jsxFileName = \"C:\\\\rajivd\\\\React\\\\raj-sec-app\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlayNumber = props => {\n  const PlayNumberClick = () => {\n    if (props.NumberColor != colors.available) return; // props.NumberClick();\n\n    console.log('num', props.NumberId);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"number\",\n    onClick: PlayNumberClick,\n    style: {\n      color: props.NumberColor\n    },\n    children: props.NumberId\n  }, props.NumberId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 4\n  }, this);\n};\n\nconst StarsDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, props.Count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"star\"\n    }, starId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this))\n  }, void 0, false);\n};\n\nconst StarMatch = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNumbers, setAvailableNumbers] = useState([1, 2, 3, 4, 5]);\n  const [candidateNumbers, setCandidateNumbers] = useState([2, 3]); //setAvailableNumbers= n=>{}\n\n  const numbers = 9;\n\n  const NumberClick = () => {\n    setCandidateNumbers(n => candidateNumbers.push(n));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: /*#__PURE__*/_jsxDEV(StarsDisplay, {\n          Count: stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, numbers).map(numberId => /*#__PURE__*/_jsxDEV(PlayNumber, {\n          NumberId: numberId,\n          NumberColor: GetNumberColor(candidateNumbers, numberId, stars, availableNumbers)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 10\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: \"Time Remaining: 10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nReactDOM.render( /*#__PURE__*/_jsxDEV(StarMatch, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 108,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction GetNumberColor(candidateNumbers, numberId, stars, availableNumbers) {\n  let numbercolor;\n  if (candidateNumbers.includes(numberId)) {\n    if (candidateNumbers.reduce((t, n) => t + n) > stars) numbercolor = colors.wrong;else numbercolor = colors.candidate;\n  } else {\n    if (availableNumbers.includes(numberId)) numbercolor = colors.available;else numbercolor = colors.used;\n  }\n  return numbercolor;\n}","map":{"version":3,"sources":["C:/rajivd/React/raj-sec-app/src/index.js"],"names":["React","useState","ReactDOM","render","PlayNumber","props","PlayNumberClick","NumberColor","colors","available","console","log","NumberId","color","StarsDisplay","utils","range","Count","map","starId","StarMatch","stars","setStars","random","availableNumbers","setAvailableNumbers","candidateNumbers","setCandidateNumbers","numbers","NumberClick","n","push","numberId","GetNumberColor","used","wrong","candidate","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","document","getElementById","numbercolor","includes","t"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\n\r\nconst PlayNumber = (props) => {\r\n\r\n  const PlayNumberClick=()=>{\r\n    if (props.NumberColor !=colors.available) return;\r\n\r\n   // props.NumberClick();\r\n    console.log('num',props.NumberId);\r\n  }\r\n  \r\n  return (\r\n  \r\n   <button key={props.NumberId} className=\"number\" onClick={PlayNumberClick} style={{color:props.NumberColor}}>  \r\n    {props.NumberId}\r\n  </button>\r\n  );\r\n}\r\n\r\nconst StarsDisplay = (props) => {\r\n  return (\r\n    <>\r\n    {utils.range(1,props.Count).map(starId=>\r\n      <div key={starId} className=\"star\" />)}\r\n    </>\r\n  );\r\n}\r\nconst StarMatch = () => {\r\n const [stars,setStars]=useState(utils.random(1,9));\r\n const [availableNumbers, setAvailableNumbers]=useState([1,2,3,4,5]);\r\n const [candidateNumbers, setCandidateNumbers]=useState([2,3]);\r\n\r\n\r\n //setAvailableNumbers= n=>{}\r\n const numbers=9;\r\n \r\n const NumberClick=()=>{\r\n setCandidateNumbers(n=>candidateNumbers.push(n))\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n              <StarsDisplay Count={stars}/>     \r\n        </div>\r\n        <div className=\"right\">\r\n        {utils.range(1,numbers).map(numberId=>                   \r\n         <PlayNumber NumberId={numberId}  NumberColor={GetNumberColor(candidateNumbers, numberId, stars, availableNumbers)}/>\r\n        )}           \r\n         \r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: 10</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\n\r\nReactDOM.render(\r\n  <StarMatch/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction GetNumberColor(candidateNumbers, numberId, stars, availableNumbers) {\r\n  let numbercolor;\r\n  if (candidateNumbers.includes(numberId))\r\n    if (candidateNumbers.reduce((t, n) => t + n) > stars)\r\n      numbercolor = colors.wrong;\r\n    else\r\n      numbercolor = colors.candidate;\r\n  else {\r\n    if (availableNumbers.includes(numberId))\r\n      numbercolor = colors.available;\r\n    else\r\n      numbercolor = colors.used;\r\n  }\r\n  return numbercolor;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}