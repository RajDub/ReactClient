{"ast":null,"code":"var _jsxFileName = \"C:\\\\rajivd\\\\React\\\\raj-sec-app\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlayNumber = props => {\n  NumberClick = () => {\n    console.log('num', props.NumberId);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <button key={props.NumberId} className=\"number\" onClick={()=>console.log('num',props.NumberId)}>\n    _jsxDEV(\"button\", {\n      className: \"number\",\n      onClick: this.NumberClick,\n      children: props.NumberId\n    }, props.NumberId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }, this)\n  );\n};\n\nconst Stars = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star\"\n  }, props.StarId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 11\n  }, this);\n};\n\nconst StarMatch = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const numbers = 9;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: utils.range(1, stars).map(starId => /*#__PURE__*/_jsxDEV(Stars, {\n          StarId: starId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, numbers).map(numberId => /*#__PURE__*/_jsxDEV(PlayNumber, {\n          NumberId: numberId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: \"Time Remaining: 10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}; // Math science\n\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nReactDOM.render( /*#__PURE__*/_jsxDEV(StarMatch, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/rajivd/React/raj-sec-app/src/index.js"],"names":["React","useState","ReactDOM","render","PlayNumber","props","NumberClick","console","log","NumberId","Stars","StarId","StarMatch","stars","setStars","utils","random","numbers","range","map","starId","numberId","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\n\r\nconst PlayNumber = (props) => {\r\n\r\n  NumberClick=()=>{\r\n    console.log('num',props.NumberId);\r\n  }\r\n  return (\r\n  // <button key={props.NumberId} className=\"number\" onClick={()=>console.log('num',props.NumberId)}>\r\n  <button key={props.NumberId} className=\"number\" onClick={this.NumberClick}>\r\n    {props.NumberId}\r\n  </button>\r\n  );\r\n}\r\n\r\nconst Stars = (props) => {\r\n  return (<div key={props.StarId} className=\"star\" />);\r\n}\r\nconst StarMatch = () => {\r\n const [stars,setStars]=useState(utils.random(1,9));\r\n const numbers=9;\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n         {utils.range(1,stars).map(starId=>\r\n          <Stars StarId={starId}/>)}          \r\n        </div>\r\n        <div className=\"right\">\r\n        {utils.range(1,numbers).map(numberId=>            \r\n           <PlayNumber NumberId={numberId}/>\r\n         )}           \r\n         \r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: 10</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\n\r\nReactDOM.render(\r\n  <StarMatch/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}